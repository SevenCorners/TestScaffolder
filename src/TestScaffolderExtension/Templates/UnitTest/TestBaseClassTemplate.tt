<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<# foreach(var usingStatement in UsingStatements)
{#>
<#=$"using {usingStatement};"#>
<#}#>

namespace <#=_unitTestProjectLocation.GetFullPathForNamespace().Trim('.')#>
{
    [TestClass]
	public abstract class <#=_unitTestCreationOptions.UnitTestBaseClassName#>
	{
        protected <#=_unitTestCreationOptions.ClassUnderTestName#> <#=_unitTestCreationOptions.ClassUnderTestName#>;

<# foreach(var parameter in _unitTestCreationOptions.ClassUnderTestConstructor.Parameters)
{#>
		<#=$"protected Mock<{parameter.SimpleTypeName}> {parameter.NameAsProtectedField};"#>
<#}#>

        [TestInitialize]
        public virtual void Arrange()
		{
<# foreach(var parameter in _unitTestCreationOptions.ClassUnderTestConstructor.Parameters)
{#>
			<#=$"{parameter.NameAsProtectedField} = new Mock<{parameter.SimpleTypeName}>();"#>
<#}#>

            <#=_unitTestCreationOptions.ClassUnderTestName#> = <#=_unitTestCreationOptions.ClassUnderTestConstructor.GetConstructorStringWithMockParameters(p => p.NameAsProtectedField)#>;
        }
	}
}