<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<# foreach(var usingStatement in UsingStatements)
{#>
<#=$"using {usingStatement};"#>
<#}#>

namespace <#=unitTestProjectLocation.GetFullPathForNamespace().Trim('.')#>
{
    [TestClass]
	public class <#=unitTestCreationOptions.UnitTestClassName#> : <#=unitTestCreationOptions.UnitTestBaseClassName#>
	{
<# foreach(var parameter in unitTestCreationOptions.MethodUnderTestParameters)
{#>
		<#=$"private {parameter.SimpleTypeName} {parameter.NameAsPrivateField};"#>
<#}#>

        [TestInitialize]
        public override void Arrange()
        {
            base.Arrange();

<# foreach(var parameter in unitTestCreationOptions.MethodUnderTestParameters)
{#>
			<#=$"{parameter.NameAsPrivateField} = {parameter.Constructor.GetConstructorString(p => $@"/*{p.NameAsLocalVariable}*/")};"#>
<#}#>
        }

        private <#=unitTestCreationOptions.MethodUnderTestReturnTypeName#> Act()
		{
            <# if(unitTestCreationOptions.MethodUnderTestReturnTypeName != "void") { #>return <# } #><#=unitTestCreationOptions.ClassUnderTestName#>.<#=unitTestCreationOptions.MethodUnderTestName#>(<#=string.Join(", ", unitTestCreationOptions.MethodUnderTestParameters.Select(p => $"{p.NameAsPrivateField}")) #>);
        }
	}
}